import 'package:flutter/material.dart';
import '../services/notification_service.dart';

class NotificationSettingsScreen extends StatefulWidget {
  const NotificationSettingsScreen({Key? key}) : super(key: key);

  @override
  State<NotificationSettingsScreen> createState() => _NotificationSettingsScreenState();
}

class _NotificationSettingsScreenState extends State<NotificationSettingsScreen> {
  final NotificationService _notificationService = NotificationService();

  bool _notificationsEnabled = true;
  bool _soundEnabled = true;
  bool _vibrationEnabled = true;
  bool _stockLowNotifications = true;
  bool _reminderNotifications = true;
  int _reminderDelayMinutes = 15;

  final List<int> _reminderOptions = [5, 10, 15, 30, 60];

  @override
  void initState() {
    super.initState();
    _loadSettings();
  }

  Future<void> _loadSettings() async {
    // Cargar configuraciones guardadas
    final enabled = await _notificationService.areNotificationsEnabled();
    setState(() {
      _notificationsEnabled = enabled;
    });
  }

  Future<void> _requestPermissions() async {
    final granted = await _notificationService.requestPermissions();

    if (mounted) {
      setState(() {
        _notificationsEnabled = granted;
      });

      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text(
            granted
                ? '‚úÖ Permisos de notificaci√≥n concedidos'
                : '‚ùå Permisos de notificaci√≥n denegados',
          ),
          backgroundColor: granted ? Colors.green : Colors.red,
        ),
      );
    }
  }

  Future<void> _testNotification() async {
    await _notificationService.showTestNotification();

    if (mounted) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('üîî Notificaci√≥n de prueba enviada'),
          backgroundColor: Colors.blue,
        ),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text(
          'üîî Configuraci√≥n de Notificaciones',
          style: TextStyle(
            fontSize: 20,
            fontWeight: FontWeight.bold,
          ),
        ),
        backgroundColor: Theme.of(context).primaryColor,
        foregroundColor: Colors.white,
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // Estado de las notificaciones
            _buildStatusCard(),

            const SizedBox(height: 20),

            // Configuraciones generales
            _buildGeneralSettings(),

            const SizedBox(height: 20),

            // Configuraciones de recordatorios
            _buildReminderSettings(),

            const SizedBox(height: 20),

            // Botones de acci√≥n
            _buildActionButtons(),

            const Spacer(),

            // Informaci√≥n adicional
            _buildInfoCard(),
          ],
        ),
      ),
    );
  }

  Widget _buildStatusCard() {
    return Card(
      elevation: 4,
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'Estado de las Notificaciones',
              style: Theme.of(context).textTheme.titleLarge?.copyWith(
                fontWeight: FontWeight.bold,
              ),
            ),
            const SizedBox(height: 10),
            Row(
              children: [
                Icon(
                  _notificationsEnabled ? Icons.check_circle : Icons.cancel,
                  color: _notificationsEnabled ? Colors.green : Colors.red,
                  size: 24,
                ),
                const SizedBox(width: 10),
                Text(
                  _notificationsEnabled
                      ? 'Notificaciones habilitadas'
                      : 'Notificaciones deshabilitadas',
                  style: TextStyle(
                    color: _notificationsEnabled ? Colors.green : Colors.red,
                    fontWeight: FontWeight.w600,
                    fontSize: 16,
                  ),
                ),
              ],
            ),
            if (!_notificationsEnabled) ...[
              const SizedBox(height: 10),
              ElevatedButton.icon(
                onPressed: _requestPermissions,
                icon: const Icon(Icons.notifications_active),
                label: const Text('Habilitar Notificaciones'),
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.orange,
                  minimumSize: const Size(double.infinity, 50),
                ),
              ),
            ],
          ],
        ),
      ),
    );
  }

  Widget _buildGeneralSettings() {
    return Card(
      elevation: 4,
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'Configuraci√≥n General',
              style: Theme.of(context).textTheme.titleLarge?.copyWith(
                fontWeight: FontWeight.bold,
              ),
            ),
            const SizedBox(height: 15),

            // Sonido
            SwitchListTile(
              title: const Text(
                'üîä Sonido',
                style: TextStyle(fontSize: 16),
              ),
              subtitle: const Text('Reproducir sonido con las notificaciones'),
              value: _soundEnabled,
              onChanged: _notificationsEnabled ? (value) {
                setState(() {
                  _soundEnabled = value;
                });
              } : null,
              activeColor: Theme.of(context).primaryColor,
            ),

            // Vibraci√≥n
            SwitchListTile(
              title: const Text(
                'üì≥ Vibraci√≥n',
                style: TextStyle(fontSize: 16),
              ),
              subtitle: const Text('Vibrar al recibir notificaciones'),
              value: _vibrationEnabled,
              onChanged: _notificationsEnabled ? (value) {
                setState(() {
                  _vibrationEnabled = value;
                });
              } : null,
              activeColor: Theme.of(context).primaryColor,
            ),

            // Notificaciones de stock bajo
            SwitchListTile(
              title: const Text(
                '‚ö†Ô∏è Stock Bajo',
                style: TextStyle(fontSize: 16),
              ),
              subtitle: const Text('Avisar cuando queden pocos medicamentos'),
              value: _stockLowNotifications,
              onChanged: _notificationsEnabled ? (value) {
                setState(() {
                  _stockLowNotifications = value;
                });
              } : null,
              activeColor: Theme.of(context).primaryColor,
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildReminderSettings() {
    return Card(
      elevation: 4,
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'Recordatorios',
              style: Theme.of(context).textTheme.titleLarge?.copyWith(
                fontWeight: FontWeight.bold,
              ),
            ),
            const SizedBox(height: 15),

            // Habilitar recordatorios
            SwitchListTile(
              title: const Text(
                'üîî Recordatorios Adicionales',
                style: TextStyle(fontSize: 16),
              ),
              subtitle: const Text('Enviar recordatorio si no marcas como tomado'),
              value: _reminderNotifications,
              onChanged: _notificationsEnabled ? (value) {
                setState(() {
                  _reminderNotifications = value;
                });
              } : null,
              activeColor: Theme.of(context).primaryColor,
            ),

            if (_reminderNotifications) ...[
              const SizedBox(height: 10),
              Text(
                'Tiempo de recordatorio:',
                style: TextStyle(
                  fontSize: 16,
                  fontWeight: FontWeight.w600,
                  color: Theme.of(context).primaryColor,
                ),
              ),
              const SizedBox(height: 10),
              Wrap(
                spacing: 8,
                children: _reminderOptions.map((minutes) {
                  final isSelected = _reminderDelayMinutes == minutes;
                  return ChoiceChip(
                    label: Text('$minutes min'),
                    selected: isSelected,
                    onSelected: _notificationsEnabled ? (selected) {
                      if (selected) {
                        setState(() {
                          _reminderDelayMinutes = minutes;
                        });
                      }
                    } : null,
                    selectedColor: Theme.of(context).primaryColor,
                    labelStyle: TextStyle(
                      color: isSelected ? Colors.white : null,
                      fontWeight: isSelected ? FontWeight.bold : null,
                    ),
                  );
                }).toList(),
              ),
            ],
          ],
        ),
      ),
    );
  }

  Widget _buildActionButtons() {
    return Column(
      children: [
        // Bot√≥n de prueba
        ElevatedButton.icon(
          onPressed: _notificationsEnabled ? _testNotification : null,
          icon: const Icon(Icons.notifications_active),
          label: const Text('Probar Notificaci√≥n'),
          style: ElevatedButton.styleFrom(
            backgroundColor: Colors.blue,
            minimumSize: const Size(double.infinity, 50),
            textStyle: const TextStyle(fontSize: 16),
          ),
        ),

        const SizedBox(height: 10),

        // Bot√≥n para cancelar todas
        ElevatedButton.icon(
          onPressed: _notificationsEnabled ? () async {
            await _notificationService.cancelAllNotifications();
            if (mounted) {
              ScaffoldMessenger.of(context).showSnackBar(
                const SnackBar(
                  content: Text('üóëÔ∏è Todas las notificaciones canceladas'),
                  backgroundColor: Colors.orange,
                ),
              );
            }
          } : null,
          icon: const Icon(Icons.clear_all),
          label: const Text('Cancelar Todas las Notificaciones'),
          style: ElevatedButton.styleFrom(
            backgroundColor: Colors.orange,
            minimumSize: const Size(double.infinity, 50),
            textStyle: const TextStyle(fontSize: 16),
          ),
        ),
      ],
    );
  }

  Widget _buildInfoCard() {
    return Card(
      color: Colors.blue.shade50,
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                Icon(Icons.info, color: Colors.blue.shade700),
                const SizedBox(width: 8),
                Text(
                  'Informaci√≥n',
                  style: TextStyle(
                    fontWeight: FontWeight.bold,
                    color: Colors.blue.shade700,
                    fontSize: 16,
                  ),
                ),
              ],
            ),
            const SizedBox(height: 8),
            Text(
              '‚Ä¢ Las notificaciones se repiten autom√°ticamente todos los d√≠as\n'
                  '‚Ä¢ Puedes personalizar el sonido desde la configuraci√≥n del sistema\n'
                  '‚Ä¢ Los recordatorios solo se env√≠an si no marcas el medicamento como tomado\n'
                  '‚Ä¢ Las notificaciones de stock bajo aparecen cuando quedan pocas unidades',
              style: TextStyle(
                color: Colors.blue.shade800,
                fontSize: 14,
              ),
            ),
          ],
        ),
      ),
    );
  }
}